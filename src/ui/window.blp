using Gtk 4.0;
using Adw 1;
using Gio 2.0;

template $CoBangWindow: Adw.ApplicationWindow {
  title: _("CoBang: QR scanner for Linux");
  show => $on_shown();

  Adw.Breakpoint {
    condition ('max-width: 550sp')

    setters {
      template.in_mobile_screen: true;
    }
  }

  content: Adw.ToolbarView {
    margin-bottom: 4;

    [top]
    Adw.HeaderBar header_bar {
      [start]
      Box {
        orientation: horizontal;

        Adw.ViewSwitcher job_switcher {
          name: 'function-switcher';
          policy: wide;
          visible: bind template.in_mobile_screen inverted;
          stack: job_viewstack;
        }

        Box job_toggler_box {
          orientation: horizontal;
          halign: center;
          visible: bind template.in_mobile_screen as <bool>;

          styles [
            'linked',
          ]

          ToggleButton toggle_scanner {
            icon-name: 'view-reveal-symbolic';
            tooltip-text: _("Scanner");
            active: bind $in_scanner_mode(job_viewstack.visible-child-name) as <bool>;
            toggled => $switch_to_scanner();
          }

          ToggleButton toggle_generator {
            icon-name: 'mail-outbox-symbolic';
            tooltip-text: _("Generator");
            active: bind toggle_scanner.active inverted;
            group: toggle_scanner;
          }
        }
      }

      [end]
      MenuButton {
        primary: true;
        icon-name: 'open-menu-symbolic';
        tooltip-text: _("Main Menu");
        menu-model: primary_menu;
      }
    }

    content: ScrolledWindow {
      height-request: 400;

      Adw.ViewStack job_viewstack {
        name: 'job-viewstack';
        vexpand: true;
        margin-start: 4;
        margin-end: 4;
        margin-bottom: 4;
        notify::visible-child => $on_job_viewstack_visible_child_changed();

        Adw.ViewStackPage stackpage_scanner {
          name: 'scanner';
          title: _("Scanner");
          icon-name: 'seeing-symbolic';

          child: Adw.MultiLayoutView scanner_page_multilayout {
            layout-name: bind $scanner_page_layout_name(template.in_mobile_screen) as <string>;
            Adw.Layout {
              name: 'sidebar';

              content: Adw.OverlaySplitView {
                sidebar-position: end;

                Adw.LayoutSlot {
                  id: 'primary';
                }

                [sidebar]
                Adw.LayoutSlot {
                  id: 'secondary';
                }
              };
            }

            Adw.Layout {
              name: 'bottom-sheet';

              content: Adw.BottomSheet scanner_bottom_sheet {
                open: true;

                Adw.LayoutSlot {
                  id: 'primary';
                  margin-bottom: bind scanner_bottom_sheet.bottom-bar-height as <int>;
                }

                [sheet]
                Adw.LayoutSlot {
                  id: 'secondary';
                }

                [bottom-bar]
                Button btn_show_result {
                  label: _("Show result");
                  halign: center;
                  margin-top: 8;
                  margin-bottom: 8;
                  visible: bind $has_some(result_display_frame.child) as <bool>;
                  clicked => $on_btn_show_result_clicked();
                }
              };
            }

            [primary]
            Adw.ToolbarView toolbarview_scanner {
              hexpand: bind template.in_mobile_screen inverted;

              content: Adw.ViewStack scan_source_viewstack {
                name: 'scan-source-viewstack';
                vexpand: true;
                notify::visible-child => $on_scan_source_viewstack_visible_child_changed();

                Adw.ViewStackPage stackpage_webcam {
                  name: 'webcam';
                  title: _("Webcam");
                  icon-name: 'camera-web-symbolic';

                  child: Adw.MultiLayoutView webcam_multilayout {
                    Adw.Layout {
                      name: 'webcam-requesting';

                      content: Box status_page_webcam_requesting {
                        orientation: vertical;

                        Image {
                          icon-name: 'edit-find-symbolic';
                          pixel-size: 128;
                          vexpand: true;
                          valign: center;
                        }
                      };
                    }

                    Adw.Layout {
                      name: 'webcam-unavailable';

                      content: Adw.StatusPage webcam_unavailable_page {
                        title: _("Webcam");
                        icon-name: 'camera-disabled-symbolic';
                        description: _("No webcam detected.");
                      };
                    }

                    Adw.Layout {
                      name: 'webcam-available';

                      content: Box webcam_page {
                        orientation: vertical;
                        spacing: 8;

                        Image {
                          icon-name: 'camera-web-symbolic';
                          pixel-size: 256;
                          vexpand: true;
                          visible: bind $is_empty(webcam_display.paintable) as <bool>;
                        }

                        Overlay {
                          visible: bind $has_some(webcam_display.paintable) as <bool>;

                          Picture webcam_display {
                            width-request: 360;
                            height-request: 240;
                          }

                          [overlay]
                          Box box_playpause {
                            orientation: horizontal;
                            halign: center;
                            valign: end;
                            spacing: 2;

                            ToggleButton btn_play {
                              icon-name: 'media-playback-start-symbolic';
                              tooltip-text: _("Play");
                              active: true;

                              styles [
                                'osd',
                              ]
                            }

                            ToggleButton btn_pause {
                              icon-name: 'media-playback-pause-symbolic';
                              tooltip-text: _("Pause");
                              group: btn_play;

                              styles [
                                'osd',
                              ]

                              toggled => $on_btn_pause_toggled();
                            }
                          }
                        }

                        Box box_webcam_settings {
                          orientation: bind $vertical_in_mobile_screen(template.in_mobile_screen) as <Orientation>;
                          spacing: 4;
                          margin-start: 4;
                          margin-end: 4;

                          Box box_webcam_selector {
                            orientation: horizontal;
                            visible: bind $has_some(webcam_store.n-items) as <bool>;
                            hexpand: bind template.in_mobile_screen inverted;
                            halign: bind $box_webcam_selector_halign(template.in_mobile_screen) as <Align>;
                            spacing: 4;

                            Label label_webcam_selector {
                              label: _("Webcam");
                              halign: start;
                              hexpand: bind template.in_mobile_screen as <bool>;
                            }

                            DropDown webcam_dropdown {
                              margin-bottom: 4;

                              model: SingleSelection {
                                model: webcam_store;
                              };

                              factory: BuilderListItemFactory {
                                template ListItem {
                                  child: Label {
                                    label: bind template.item as <$WebcamDeviceInfo>.name;
                                    ellipsize: middle;
                                  };
                                }
                              };

                              notify::selected => $on_webcam_device_selected();
                            }
                          }

                          Box box_mirror {
                            orientation: horizontal;
                            spacing: 4;
                            valign: bind $box_mirror_valign(template.in_mobile_screen) as <Align>;
                            halign: bind $box_mirror_halign(template.in_mobile_screen) as <Align>;
                            visible: bind $has_some(webcam_display.paintable) as <bool>;

                            Label label_mirror {
                              label: _("Mirror");
                              halign: start;
                            }

                            Switch mirror_switch {
                              active: true;
                              notify::active => $on_mirror_switch_toggled();
                            }
                          }
                        }
                      };
                    }
                  };
                }

                Adw.ViewStackPage {
                  name: 'image';
                  title: _("Image");
                  icon-name: 'image-x-generic-symbolic';

                  child: Box {
                    orientation: vertical;
                    spacing: 4;

                    AspectFrame frame_image {
                      focusable: true;

                      child: Box box_image_empty {
                        orientation: vertical;

                        Picture pasted_image {
                          visible: false;
                        }

                        Box {
                          orientation: vertical;
                          spacing: 6;
                          visible: bind pasted_image.visible inverted;

                          Label {}

                          Image {
                            resource: '/vn/hoabinh/quan/CoBang/img/wireframe-image-add.svg';
                            pixel-size: 128;
                          }

                          Label image_guide {
                            label: '';
                            margin-bottom: 4;
                            selectable: true;
                          }
                        }
                      };

                      ShortcutController {
                        Shortcut {
                          trigger: '<Control>v';
                          action: 'action(win.paste-image)';
                        }
                      }

                      DropTargetAsync image_drop_target {
                        formats: 'GFile';
                        actions: copy;
                        accept => $on_image_drop_target_accept();
                        drop => $on_image_dropped();
                      }

                      styles [
                        'frame',
                      ]
                    }

                    Box {
                      orientation: horizontal;
                      spacing: 4;

                      Button btn_filechooser {
                        clicked => $on_btn_filechooser_clicked();

                        Box {
                          orientation: horizontal;
                          spacing: 4;

                          Image {
                            icon-name: 'document-open-symbolic';
                          }

                          Label {
                            label: _("Choose an image");
                          }
                        }
                      }

                      Label label_chosen_file {
                        label: bind $passed_image_name(pasted_image.file) as <string>;
                        ellipsize: middle;
                        visible: bind $has_some(label_chosen_file.label) as <bool>;

                        styles [
                          'dim-label',
                          'dimmed',
                        ]
                      }
                    }
                  };
                }
              };

              [bottom]
              Adw.ViewSwitcherBar scan_source_switcher_bar {
                stack: scan_source_viewstack;
                reveal: true;
              }
            }

            [secondary]
            Box {
              orientation: vertical;
              spacing: 4;
              margin-start: 4;

              Frame result_display_frame {
                width-request: 212;
                vexpand: true;

                Box {
                  orientation: vertical;
                  margin-top: 12;

                  Label {
                    label: _("Please open webcam or choose an image.");
                    selectable: true;
                    wrap: true;
                    margin-start: 4;
                    margin-end: 4;
                    visible: bind $is_idle(template.scanner-state) as <bool>;
                  }

                  Box {
                    orientation: vertical;
                    spacing: 4;
                    visible: bind $is_scanning(template.scanner-state) as <bool>;

                    Label {
                      label: _("Scanning...");
                    }

                    Image {
                      icon-name: 'system-search-symbolic';
                      pixel-size: 64;
                    }
                  }

                  Label {
                    label: _("No result found.");
                    selectable: true;
                    visible: bind $is_no_result(template.scanner-state) as <bool>;
                  }

                  Label {
                    label: bind $scanning_result_title(template.scanner-state) as <string>;
                    selectable: true;
                    opacity: 0.8;
                    visible: bind $has_scanning_result(template.scanner-state) as <bool>;
                  }

                  Adw.Bin result_bin {
                    visible: bind $has_scanning_result(template.scanner-state) as <bool>;
                  }
                }
              }

              Expander raw_result_expander {
                margin-bottom: 4;
                vexpand: false;
                valign: end;
                label: _("Raw result");

                Overlay {
                  [overlay]
                  Button btn_copy {
                    icon-name: 'edit-copy-symbolic';
                    tooltip-text: _("Copy");
                    halign: end;
                    valign: end;
                    margin-bottom: 2;
                    clicked => $on_btn_copy_clicked();
                  }

                  ScrolledWindow {
                    height-request: 80;

                    TextView raw_result_display {
                      monospace: true;
                      editable: false;
                      wrap-mode: char;

                      vadjustment: Adjustment {};
                    }
                  }
                }
              }
            }
          };
        }

        Adw.ViewStackPage stackpage_generator {
          name: 'generator';
          title: _("Generator");
          icon-name: 'mail-outbox-symbolic';

          child: $GeneratorPage generator_page {};
        }
      }
    };
  };
}

menu primary_menu {
  section {
    item {
      label: _("_Keyboard Shortcuts");
      action: 'win.show-help-overlay';
    }

    item {
      label: _("_About");
      action: 'app.about';
    }
  }
}

FileFilter file_filter {
  mime-types [
    'image/svg+xml',
    'image/png',
    'image/jpeg',
    'image/webp',
    'image/gif',
  ]
}

Gio.ListStore webcam_store {
  item-type: typeof<$WebcamDeviceInfo>;
}
